ext {
    lombok = "$lombokGroup:$lombokAf:$lombokVersion"
    jetbrainsAnnotations = "$jbAnnoGroup:$jbAnnoAf:$jbAnnoVersion"

    flyway = "$flywayGroup:$flywayCore:$flywayVersion"
    h2 = "$h2DbGroup:$h2Db:$h2DbVersion"

    springBootGradlePlugin = "$springBoot:$springBootPlugin:$springBootVersion"
    springBootStarter = [
            dataJpa: "$springBoot:$starterDataJpa:$springBootVersion",
            security: "$springBoot:$starterSecurity:$springBootVersion",
            thymeleaf: "$springBoot:$starterThymeleaf:$springBootVersion",
            test: "$springBoot:$starterTest:$springBootVersion"
    ]

    bootstrap = "$webjars:$webjarsBootstrap:$webjarsBootstrapVersion"
    jquery = "$webjars:$webjarsJquery:$webjarsJqueryVersion"

    junit5 = "$junit5Group:$junit5Af:$junit5Version"
    junit5PluginJar = "$junit5PfGroup:$junit5PfAf:$junit5PfVersion:"
}

subprojects {
    if (project.file('secret.gradle').exists()) {
        apply from: 'secret.gradle'
    }

    task ('createDirectories') {
        def base = projectDir.absolutePath
        def projects = [
                java: 'java-projects'
                , scala: 'scala-projects'
                , groovy: 'groovy-projects'
                , kotlin: 'kotlin-projects'
        ]
        def projectType = projects.find { base.contains(it.value) }?.key
        if (projectType != null) {
            def mainSrcDir = project.file("src/main/$projectType")
            def testSrcDir = project.file("src/test/$projectType")
            doLast {
                if (!mainSrcDir.exists()) mainSrcDir.mkdirs()
                if (!testSrcDir.exists()) testSrcDir.mkdirs()
            }
        }
    }
}
