buildscript {
    repositories { 
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath springBootGradlePlugin
        classpath junit5PluginJar
        classpath jpaSchemaGradlePlugin
    }
}

apply plugin: 'java'
apply plugin: springBoot
apply plugin: junit5Plugin
apply plugin: jpaSchemaGen

jar {
    baseName = 'auth-with-jpa'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compileOnly lombok
    compileOnly jetbrainsAnnotations
    compile     springBootStarter.dataJpa
    compile     springBootStarter.security
    compile     springBootStarter.thymeleaf
    compile     flyway
    runtime     h2

    testCompile junit5
}

import java.time.LocalDate
import java.time.ZoneId
import java.time.format.DateTimeFormatter

generateSchema {
    vendor = 'hibernate'
    packageToScan = ['com.example.entity']
    scriptAction = 'create'
    format = true

    def zone = ZoneId.of('Asia/Tokyo')
    def today = LocalDate.now(zone)
    def fmt = DateTimeFormatter.ofPattern('uuuuMMdd')
    def outputDir = "${buildDir}/ddl"
    def fileName = "V0_${today.format(fmt)}__create.sql"
    def generatedFile = file("$outputDir/$fileName")
    project.tasks.generateSchema.outputs.file generatedFile

    createOutputFileName = fileName
    outputDirectory = file(outputDir)
    databaseProductName = 'H2'
    databaseMajorVersion = 1
    databaseMinorVersion = 4
    properties = [
            'hibernate.dialect': 'org.hibernate.dialect.H2Dialect'
    ]
}

task ('ddlCopy', group: 'build', type: Copy) {
    from (tasks.generateSchema.outputs.files) {
        into 'db/migration'
    }
    into (tasks.processResources.destinationDir)
}
