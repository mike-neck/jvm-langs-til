buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath junit5PluginJar
        classpath jpaSchemaGradlePlugin
    }
}

apply plugin: 'java'
apply plugin: junit5Plugin
apply plugin: jpaSchemaGen

ext {
    metamodelSrcDir = file("${buildDir}/metamodel/src/main/generated")
}

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    metamodel
}

dependencies {
    compileOnly     'org.eclipse.persistence:javax.persistence:2.1.1'
    compileOnly     jetbrainsAnnotations
    compileOnly     lombok

    metamodel       'org.eclipse.persistence:org.eclipse.persistence.jpa.modelgen.processor:2.6.4'

    testCompile     junit5
}

task delMetamodel(type: Delete) {
    delete metamodelSrcDir
}

task prepareMetamodelSrcDir {
    dependsOn delMetamodel
    doLast {
        mkdir metamodelSrcDir
    }
}

compileJava {
    dependsOn prepareMetamodelSrcDir, processResources
    classpath += configurations.metamodel
    options.compilerArgs += ['-s', metamodelSrcDir]
    options.compilerArgs += ["-Aeclipselink.persistencexml=${processResources.destinationDir}/META-INF/persistence.xml" ]
    options.compilerArgs += ["-Aeclipselink.canonicalmodel.subpackage=query"]
    options.compilerArgs += ["-Aeclipselink.canonicalmodel.prefix=_"]
    options.compilerArgs += ["-Aeclipselink.canonicalmodel.suffix="]
}

generateSchema {
    def outputDir = "${buildDir}/ddl"
    def fileName = 'create.sql'

    project.tasks.generateSchema.outputs.file file("$outputDir/$fileName")

    vendor = 'eclipselink'
    packageToScan = ['com.example.entity', 'com.example.converter']
    scriptAction = 'create'
    format = true

    createOutputFileName = fileName
    outputDirectory = file(outputDir)
    databaseProductName = 'MySQL'
}

task showProcessor {
    doLast {
        println configurations.metamodel.asPath
    }
}
